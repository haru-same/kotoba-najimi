<% 
const reviewProgress = {}; 
let mode = state.condition;
if(fact.type == 3) mode = 2;
if(typeof options != 'undefined' && 'overrideMode' in options) mode = options.overrideMode;
%>
<% include partial/review-progress %>
<html>
<head>
	<title>(まだ<%= reviewProgress.nowReviews %>枚) 繰り返すの復習</title>
	<%- include('partial/head') %>
	<link rel="stylesheet" type="text/css" href="/css/review.css">

	<link rel="apple-touch-icon" sizes="120x120" href="/icons/joshua-dot/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/icons/joshua-dot/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/icons/joshua-dot/favicon-16x16.png">
	<link rel="manifest" href="/icons/joshua-dot/site.webmanifest">
	<link rel="mask-icon" href="/icons/joshua-dot/safari-pinned-tab.svg" color="#5bbad5">
	<link rel="shortcut icon" href="/icons/joshua-dot/favicon.ico">
	<meta name="msapplication-TileColor" content="#00a300">
	<meta name="msapplication-config" content="/icons/joshua-dot/browserconfig.xml">
	<meta name="theme-color" content="#ffffff">

	<script type="text/javascript">
		const targetId = '<%= fact.id %>';
		const originalText = '<%= fact.sentence %>';
		let start = new Date().getTime();
		let results = {};

		// 0: input hidden, text visible
		// 1: input visible, text hidden
		// 2: waiting for response
		// 3: waiting for audio
		let state = 0;
		const BeginInput = 1;
		const SubmitInput = 2;
		const AwaitingAudioState = 3;
		const DoneState = 4;
		const ignore = "、…。！？～";
		const correctAnswer = '<%= fact.word %>'

		let setCorrectColor = () => {
			$("body").css('background-color', 'lightgreen');
		};

		let setWrongColor = () => {
			$("body").css('background-color', 'pink');
		};

		const showError = (text) => {
			$(".error").text(text);
			$('.error').fadeIn().delay(5000).fadeOut();
		};

		const showCorrectedText = (res) => {
			console.log(res);

			let outString = "";
			let missedString = "";
			let deleteString = "";
			for(const pair of res.pairs){
				const isMissingPunctuation = pair[1] == null && ignore.includes(pair[0]);
				if(pair[0] != pair[1] && !isMissingPunctuation){
					if(pair[0] != null) missedString += pair[0];
					if(pair[1] != null) deleteString += pair[1];
				} else {
					if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
					if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
					deleteString = "";
					missedString = "";
					outString += pair[0];
				}
			}
			if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
			if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
			$('#output-text').show();
			$("#output-text").html(outString + " [" + Math.round(100 * res.score) + "%]");

			if(res.error){
				showError(res.error);
			}

			$("#answer-text-container").show();

			state = DoneState;
		};

		const getVerifiedPronunciation = (text, message, callback) => {
			if(!text) {
				console.error("Can't get pronunciation for null or empty text.");
				return;
			}

			$.get('/furigana', { text: text }, (res) => {
				let reading = prompt(message, res);
				if (reading == null || reading == "") console.log("canceled reading input");
				else callback(reading);
			});
		};

		const stateEnterHandlers = [
			() => { // beginInput
				<% if(mode == 1 || mode == 2) {%>
				state = AwaitingAudioState;
				var audio = new Audio('/audio/<%- fact.audio %>');
				$("#begin-band").hide();
				audio.addEventListener("ended", function(){
					$("#original-text").hide();
					$("#blanked-text").show();
					$('input').show();
					$('input').focus();

					state = BeginInput;
				});
				audio.play();
				<% } else { %>
				$("#original-text").hide();
				$("#begin-band").hide();
				$('input').show();
				$('input').focus();

				state = BeginInput;
				<% } %>
			},
			() => { // submitInput
				if($("input").length > 0){
					const input = $('input').val();

					$("#continue").show();
	        		$('input').attr('disabled', true);

	        		state = SubmitInput;

	        		const reviewData =  { 
	        			deck: "<%= deck %>", 
	        			id: targetId, 
	        			input: input, 
	        			original: originalText, 
	        			duration: new Date().getTime() - start, 
	        			debug: <%= debug %>, 
	        			type: '<%= mode == 2 ? 'rw' : 'rs' %>',
	        			source: '<%= options.source || 'normal' %>'
	        		};

	        		const renderFurigana = () => {
	        			$.get('/render-furigana', { text: '<%= fact.word %>', reading: '<%= fact.reading %>' }, (res) => {
							$('input').hide();
							$('#output-text').show();
							$("#output-text").html(res);
							state = DoneState;
						});
	        		};

	        		const postReview = () => {
	     //    			$.post('/review', reviewData, (res) => {
						// 	<% if(mode == 2) { %>
						// 	renderFurigana();
						// 	<% } else { %>
						// 	showCorrectedText(res);
						// 	<% } %>

						// 	<% if(mode == 2) { %>
						// 	if(res.score >= 0.95) setCorrectColor();
						// 	else setWrongColor();
						// 	<% } else { %>
						// 	$("body").css('background-color', 'lightblue');
						// 	<% } %>
						// });
	        		};

	        		<% if(options.source == 'daily-recall' && !fact['sentence-reading']) { %>
	        		$("#answer-text-container").show();
	        		getVerifiedPronunciation('<%= fact.sentence %>', 'Enter the reading for this sentence:', (reading) => {
	        			$.post('/sentence-reading', { id: targetId, sentenceReading: reading }, () => {
	        				postReview();
	        			});
	        		});
	        		<% } else { %>
					postReview();
					<% } %>
	        	}
			},
			() => { // awaitSubmitResponse
				showError("Please wait while the submission completes.");
			},
			() => {
				showError("Please wait for the audio to finish playing.");
			},
			() => {
				location.reload();
			}
		];

		$(document).ready(() => {
			const textInput = document.querySelector('input');
			wanakana.bind(textInput);
			// $('input').hide();
			$('#output-text').hide();

			$('input').focus();
			state = BeginInput;

			$(document).keypress((e) => {
	        	console.log(e.which);
	        	if(e.which == 13) {
	        		stateEnterHandlers[state]();
				}
			});

			$("#begin-input").click(() => {
				stateEnterHandlers[state]();
			});

			// $("#continue").click(() => {
			// 	if(state == SubmitInput){
	  //       		location.reload();
	  //       	}
			// });

			$("#delete-review").click(() => {
				if(confirm("Are you sure you want to delete this?")){
					//$.post('/delete-review', { id: targetId }, () => {
						location.reload();
					//});
				}
			});

			$("#post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});

			$(".post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});

			let canRespond = true;
			$(".answer-button").click((e) => {
				if(!canRespond) return;

				canRespond = false;
				const answer = $(e.target).attr('answer');
				console.log(answer, answer == correctAnswer);

				if(answer == correctAnswer) setCorrectColor();
				else setWrongColor();

				const result = answer == correctAnswer ? 1 : 0;
				$(e.target).css('background-color', 'pink');
				$(`.answer-button[answer='${correctAnswer}']`).css('background-color', 'lightgreen');

				const reviewData =  { 
        			id: targetId, 
        			input: answer,
        			duration: new Date().getTime() - start, 
        			debug: <%= debug %>, 
        			type: 'fresh-cloze',
        			source: 'cloze',
        			word: '<%= fact.word %>',
        			result: result,
					choices: '<%- JSON.stringify(clozeChoices) %>',
					clozeSentence: '<%= clozeSentence %>'
        		};

				$.post('/log-cloze', reviewData, (res) => {
					console.log('done');
				});
			});
		});
	</script>
</head>
<body>
	<div id="blanked-text" class="band" style="text-align:center; font-size: 2rem;">
		<span id="original-text-container"><%- clozeSentenceHtml %></span>
	</div>

	<!-- <input
		class="band" 
		id="reading-input-<%= Math.round(1000000*Math.random()) %>" 
		name="" 
		style="text-align:center; font-size: 2rem"
		type="text"
		autocapitalize="none"
		autocorrect="off"
		autocomplete="false"
		spellcheck="false"
	/> -->

	<div class='band' style="text-align:center">
	<% for(const choice of clozeChoices) { %>
	<button class="answer-button" answer="<%= choice %>"><%= choice %></button>
	<% } %>
	</div>

	<div id="output-text" class="band" style="text-align:center; font-size: 2rem"></div>
	<div id="answer-text-container" class="band" style="display:none; text-align:center; font-size: 2rem""><%- furiganaHtml %><br><button id="post-play-button"><i class="fas fa-volume-up"></i></button></div>
	<div class="error"></div>
	<div style="height: 100px;"></div>
	<div id="continue" class="band" style="display: none; font-style: italic; text-align: center">Press enter or click to continue... (<%= reviewProgress.nowReviews %> remaining) <button id="delete-review">delete</button> <button class="post-play-button"><i class="fas fa-volume-up"></i></button></div>
</body>
</html>