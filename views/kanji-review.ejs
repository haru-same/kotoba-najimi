<% 
const reviewProgress = {}; 
let condition = 0;
if(state.condition) condition = state.condition;
if(options.condition) condition = options.condition;
if(options.onlyKanji) condition = 0;

if(options.useTextInput == null){
	options.useTextInput = false;
	if(condition == 0) options.useTextInput = true;
}

if(options.useCloze == null){
	options.useCloze = false;
}

if(options.replacement == null){
	const word = fact.target || fact.word;
	options.replacement = ` <b>${word}</b> `;
	if(options.useCloze) options.replacement = '____';
}

if(options.noImage == null){
	options.noImage = state['image-condition'] == 1 && !options.onlyKanji;
}
%>
<% include partial/review-progress %>
<html>
<head>
	<title>(<%= reviewProgress.createdToday %>新枚, まだ<%= reviewProgress.nowReviews %>枚) 漢字復習</title>
	<%- include('partial/head') %>
	<link rel="stylesheet" type="text/css" href="/css/review.css">

	<link rel="apple-touch-icon" sizes="76x76" href="/icons/estelle-dot/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/icons/estelle-dot/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/icons/estelle-dot/favicon-16x16.png">
	<link rel="manifest" href="/icons/estelle-dot/site.webmanifest">
	<link rel="mask-icon" href="/icons/estelle-dot/safari-pinned-tab.svg" color="#5bbad5">
	<link rel="shortcut icon" href="/icons/estelle-dot/favicon.ico">
	<meta name="msapplication-TileColor" content="#2d89ef">
	<meta name="msapplication-config" content="/icons/estelle-dot/browserconfig.xml">
	<meta name="theme-color" content="#ffffff">

	<script type="text/javascript">
		const targetId = '<%= fact.id %>';
		let start = new Date().getTime();
		let results = {};
		let lastInput = "";
		let complete = false;
		<% 
		let initialTryCount = 1; 
		if(options.onlyKanji) initialTryCount = 0;
		%>
		let tries = <%= initialTryCount %>;

		const renderFurigana = () => {
			$.get('/render-furigana', { text: '<%= fact.word || fact.target %>', reading: '<%= fact.reading %>' }, (res) => {
				$('#prompt').html($('#prompt').html().replace('____', ` <b>${res}</b> `));
			});
		};

		<% if(options.useTextInput) { %>
		const showCorrectAnswer = (res) => {
			$('#reading-input').val(res.reading);
			renderFurigana();
		};
		<% } else { %> 
		const showCorrectAnswer = (res) => {
			$("#speech-out").text(res.reading);
		};
		<% } %>

		let setCorrectColor = () => {
			$("body").css('background-color', 'lightgreen');
		};

		let setWrongColor = () => {
			$("body").css('background-color', 'pink');
		};

		const handleAnswerResponse = (res) => {
			console.log(res);
			start = new Date().getTime();
			if(res.correct == 1){
				setCorrectColor();
				$("#continue").show();
				complete = true;
				showCorrectAnswer(res);
			} else {
				setWrongColor();
				if(tries == 0){
					$("#continue").show();
					complete = true;
					showCorrectAnswer(res);
				} else {
					tries--;
				}
			}
		};

		const showError = (text) => {
			$(".error").text(text);
			$('.error').fadeIn().delay(5000).fadeOut();
		};

		$(document).ready(() => {
			const textInput = document.querySelector('input');
			wanakana.bind(textInput);

			var recognition = new webkitSpeechRecognition();
			recognition.continuous = false;
	        recognition.interimResults = true;
	        recognition.maxAlternatives = 40;
	        recognition.lang = 'ja';



			recognition.onresult = function(event) { 
				console.log(event);
	            if (typeof(event.results) == 'undefined') {
	                console.log('error');
	                recognition.onend = null;
	                recognition.stop();
	                upgrade();
	                return;
	            } 

	            for (var i = event.resultIndex; i < event.results.length; ++i) {
	                var speechOut = event.results[i][0].transcript;
	                console.log(speechOut);
	                if (event.results[i].isFinal) {
	                	console.log('final');
	                	results = event.results[i];
	                	console.log(results);
		        	} else {
		        		$("#speech-out").toggleClass('partial', true);
		        		$("#speech-out").text(speechOut);
		        	}
	            }
	        };

	        recognition.onstart = function() {
	            console.log('starting');
	        };

	        recognition.onerror = function(event) {
	            console.log(event.error);
	            console.log(event);  
	        };

	        const startRecording = () => {
	        	$("#mic-button").toggleClass('recording', true);
				$("#mic-button").attr('disabled', true);

				recognition.onend = function(){ 
					console.log('end');
					console.log({ id: targetId, type: 's', results: results });
					const outResults = [];
					for(let i = 0; i < results.length; i++){
						outResults.push(results[i].transcript);
					}
					// , results: results
		    		$.post('/review', { deck: "<%= deck %>", id: targetId, type: 's', results: outResults, duration: new Date().getTime() - start, tries: tries, debug: <%= debug %>, cloze: <%= options.useCloze %> }, (res) => {
		    			handleAnswerResponse(res);
		    			$("#speech-out").toggleClass('partial', false);
		    			$("#mic-button").toggleClass('recording', false);
		    			if(res.correct == 0){
		    				$("#mic-button").attr('disabled', false);
		    			}
		    		});
		    	}
		    	recognition.start();
	        };

			$("#mic-button").click(() => {
				if(new Date().getTime() - start > 5 * 60 * 1000) start = new Date().getTime();
				
				startRecording();
			});

			$(document).keypress((e) => {
				if(new Date().getTime() - start > 5 * 60 * 1000) start = new Date().getTime();

	        	console.log(e.which);
	        	// enter pressed
	        	if(e.which == 13) {
	        		if(complete){
	        			<% if(options.onlyKanji){ %>
		        		showError("Answer the question below.");
		        		<% } else { %>
		        		location.reload();
		        		<% } %>
		        		return;
		        	}

	        		const input = $('#reading-input').val();
	        		if(input == lastInput){
	        			showError("Change the text");
	        			return;
	        		}

	        		if($("#reading-input").length > 0 && !complete){
	        			lastInput = input;
		        		$('#reading-input').attr('disabled', true);
		        		$.post('/review', { deck: "<%= deck %>", id: targetId, type: 't', input: input, duration: new Date().getTime() - start, tries: tries, debug: <%= debug %> }, (res) => {
		        			handleAnswerResponse(res);
		        			if(res.correct == 0){
		        				$('#reading-input').attr('disabled', false);
		        				$('#reading-input').select();
		        			}
		        		});
		        	}
				}

				//space pressed
				if(e.which == 32) {
					if($("#mic-button").length > 0 && !$("#mic-button").attr('disabled') && !complete){
						startRecording();
					}
				}
			});

			$('#reading-input').focus();

			$("#delete-review").click(() => {
				if(confirm("Are you sure you want to delete this?")){
					$.post('/delete-review', { deck: "<%= deck %>", id: targetId }, () => {
						location.reload();
					});
				}
			});

			$("#meaning-0").click(() => {
				$.post('/log-meaning-assessment', { id: '<%= fact.id %>', streak: <%= state.streak %>, word: '<%= fact.word %>', result: 0, input: lastInput }, () => {
					console.log('post finished');
					location.reload();
				});
			});

			$("#meaning-1").click(() => {
				$.post('/log-meaning-assessment', { id: '<%= fact.id %>', streak: <%= state.streak %>, word: '<%= fact.word %>', result: 1, input: lastInput }, () => {
					console.log('post finished');
					location.reload();
				});
			});

			$(".post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});
		});
	</script>
</head>
<body>
	<% if(fact.image && !options.noImage) { %>
	<%- include('partial/kanji-review-image-content', { reviewProgress: reviewProgress, parentOptions: options }) %>
	<% } else { %>
	<%- include('partial/kanji-review-band-content', { reviewProgress: reviewProgress, parentOptions: options }) %>
	<% } %>
</body>
</html>