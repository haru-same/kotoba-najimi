<% 
const reviewProgress = {}; 

options.hasSentenceReading = fact.type == 2 || (fact.type == 3 && fact['sentence-reading']);
options.giveFeedback = options.giveFeedback || options.promptType == 'audio-cloze';

let tries = 0;
if(options.promptType == 'audio-cloze') tries = 1;
%>
<% include partial/review-progress %>
<html>
<head>
	<title>(まだ<%= reviewProgress.nowReviews %>枚) 繰り返すの復習</title>
	<%- include('partial/head') %>
	<link rel="stylesheet" type="text/css" href="/css/review.css">

	<link rel="apple-touch-icon" sizes="120x120" href="/icons/joshua-dot/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/icons/joshua-dot/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/icons/joshua-dot/favicon-16x16.png">
	<link rel="manifest" href="/icons/joshua-dot/site.webmanifest">
	<link rel="mask-icon" href="/icons/joshua-dot/safari-pinned-tab.svg" color="#5bbad5">
	<link rel="shortcut icon" href="/icons/joshua-dot/favicon.ico">
	<meta name="msapplication-TileColor" content="#00a300">
	<meta name="msapplication-config" content="/icons/joshua-dot/browserconfig.xml">
	<meta name="theme-color" content="#ffffff">

	<script type="text/javascript">
		const targetId = '<%= fact.id %>';
		const originalText = '<%= fact.sentence %>';
		let start = new Date().getTime();
		let results = {};

		let tries = <%= tries %>;

		// 0: input hidden, text visible
		// 1: input visible, text hidden
		// 2: waiting for response
		// 3: waiting for audio
		let state = 0;
		const BeginInput = 1;
		const SubmitInput = 2;
		const AwaitingAudioState = 3;
		const DoneState = 4;
		const ignore = "、…。！？～";

		let setCorrectColor = () => {
			$("body").css('background-color', 'lightgreen');
		};

		let setWrongColor = () => {
			$("body").css('background-color', 'pink');
		};

		const showError = (text) => {
			$(".error").text(text);
			$('.error').fadeIn().delay(5000).fadeOut();
		};

		const showCorrectedText = (res) => {
			console.log(res);

			let outString = "";
			let missedString = "";
			let deleteString = "";
			for(const pair of res.pairs){
				const isMissingPunctuation = pair[1] == null && ignore.includes(pair[0]);
				if(pair[0] != pair[1] && !isMissingPunctuation){
					if(pair[0] != null) missedString += pair[0];
					if(pair[1] != null) deleteString += pair[1];
				} else {
					if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
					if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
					deleteString = "";
					missedString = "";
					outString += pair[0];
				}
			}
			if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
			if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
			$('#output-text').show();
			$("#output-text").html(outString + " [" + Math.round(100 * res.score) + "%]");

			if(res.error){
				showError(res.error);
			}

			$("#answer-text-container").show();

			state = DoneState;
		};

		const getVerifiedPronunciation = (text, message, callback) => {
			if(!text) {
				console.error("Can't get pronunciation for null or empty text.");
				return;
			}

			$.get('/furigana', { text: text }, (res) => {
				let reading = prompt(message, res);
				if (reading == null || reading == "") console.log("canceled reading input");
				else callback(reading);
			});
		};

		const stateEnterHandlers = [
			() => { // beginInput
				<% if(options.promptType != 'text') {%>
				state = AwaitingAudioState;
				var audio = new Audio('/audio/<%- fact.audio %>');
				$("#begin-band").hide();
				audio.addEventListener("ended", function(){
					$("#original-text").hide();
					$("#blanked-text").show();
					$('input').show();
					$('input').focus();

					state = BeginInput;
				});
				audio.play();
				<% } else { %>
				$("#original-text").hide();
				$("#begin-band").hide();
				$('input').show();
				$('input').focus();

				state = BeginInput;
				<% } %>
			},
			() => { // submitInput
				if($("input").length > 0){
					const input = $('input').val();

	        		$('input').attr('disabled', true);

	        		state = SubmitInput;

	        		const reviewData =  { 
	        			deck: '<%= deck %>', 
	        			id: targetId, 
	        			input: input, 
	        			original: originalText, 
	        			duration: new Date().getTime() - start, 
	        			debug: <%= debug %>, 
	        			type: '<%= options.promptType == 'audio-cloze' ? 'rw' : 'rs' %>',
	        			promptType: '<%= options.promptType %>',
	        			source: '<%= options.source || 'normal' %>',
	        			clozeWord: '<%= options.clozeWord %>',
	        			skipStreakUpdate: <%= options.skipStreakUpdate == true || options.skipStreakUpdate == 'true' %>,
	        			tries: tries
	        		};

	        		const renderFurigana = () => {
	        			$.get('/render-furigana', { text: '<%= fact.word %>', reading: '<%= fact.reading %>' }, (res) => {
							$('input').hide();
							$('#output-text').show();
							$("#output-text").html(res);
							state = DoneState;
						});
	        		};

	        		const postReview = () => {
	        			$.post('/review', reviewData, (res) => {
							<% if(options.promptType == 'audio-cloze') { %>
							if(!res.hasTries) renderFurigana();
							<% } else { %>
							showCorrectedText(res);
							<% } %>

							<% if(options.giveFeedback){ %>
							if(res.score >= 0.99) setCorrectColor();
							else setWrongColor();
							<% } else { %>
							$("body").css('background-color', 'lightblue');
							<% } %>

							if(res.hasTries){
								$('input').attr('disabled', false);
								$('input').focus();
								$('input').select();
								state = BeginInput;
							} else {
								$("#continue").show();
							}
							tries--;
						});
	        		};

	        		<% if(!options.hasSentenceReading && options.promptType != 'audio-cloze') { %>
	        		$("#answer-text-container").show();
	        		getVerifiedPronunciation('<%= fact.sentence %>', 'Enter the reading for this sentence:', (reading) => {
	        			$.post('/sentence-reading', { id: targetId, sentenceReading: reading }, () => {
	        				postReview();
	        			});
	        		});
	        		<% } else { %>
					postReview();
					<% } %>
	        	}
			},
			() => { // awaitSubmitResponse
				showError("Please wait while the submission completes.");
			},
			() => {
				showError("Please wait for the audio to finish playing.");
			},
			() => {
				location.reload();
			}
		];

		$(document).ready(() => {
			<% if(options.randomWord && !fact['sentence-chunks']) { %>
			$.get('/sentence-chunks', { text: '<%= fact['sentence-reading'] %>' }, (res) => {
				let chunks = prompt('<%= fact.sentence %>\nEnter the chunks for this sentence:', res);
				if (chunks == null || chunks == "") {
					console.log("canceled reading input");
					location.reload();
				} else {
					$.post('/sentence-chunks', { id: targetId, sentenceChunks: chunks }, () => {
	    				location.reload();
	    			});
				}
			});
			<% } %>

			const textInput = document.querySelector('input');
			wanakana.bind(textInput);
			$('input').hide();
			$('#output-text').hide();

			$(document).keypress((e) => {
	        	console.log(e.which);
	        	if(e.which == 13) {
	        		stateEnterHandlers[state]();
				}
			});

			$("#begin-input").click(() => {
				stateEnterHandlers[state]();
			});

			$("#delete-review").click(() => {
				if(confirm("Are you sure you want to delete this?")){
					$.post('/delete-review', { deck: '<%= deck %>', id: targetId }, () => {
						location.reload();
					});
				}
			});

			$("#post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});

			$(".post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});
		});
	</script>
</head>
<body>
	<% if(!options.hideImage && fact.image && state['image-condition'] == 1) { %>
	<%- include('partial/recall-review-image-content', { reviewProgress: reviewProgress }) %>
	<% } else { %>
	<%- include('partial/recall-review-band-content', { reviewProgress: reviewProgress }) %>
	<% } %>
</body>
</html>