<% 
const reviewProgress = {}; 
let mode = state.condition;
if(fact.type == 3) mode = 2;
%>
<% include partial/review-progress %>
<html>
<head>
	<title>(まだ<%= reviewProgress.nowReviews %>枚) 繰り返すの復習</title>
	<script src="/js/jquery-3.2.1.min.js"></script>
	<script src="/js/wanakana.min.js"></script>
	<script defer src="https://use.fontawesome.com/releases/v5.0.6/js/all.js"></script>
	<link rel="stylesheet" type="text/css" href="/css/review.css">

	<link rel="apple-touch-icon" sizes="120x120" href="/icons/joshua-dot/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/icons/joshua-dot/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/icons/joshua-dot/favicon-16x16.png">
	<link rel="manifest" href="/icons/joshua-dot/site.webmanifest">
	<link rel="mask-icon" href="/icons/joshua-dot/safari-pinned-tab.svg" color="#5bbad5">
	<link rel="shortcut icon" href="/icons/joshua-dot/favicon.ico">
	<meta name="msapplication-TileColor" content="#00a300">
	<meta name="msapplication-config" content="/icons/joshua-dot/browserconfig.xml">
	<meta name="theme-color" content="#ffffff">

	<script type="text/javascript">
		const targetId = '<%= fact.id %>';
		const originalText = '<%= fact.sentence %>';
		let start = new Date().getTime();
		let results = {};

		// 0: input hidden, text visible
		// 1: input visible, text hidden
		// 2: waiting for response
		// 3: waiting for audio
		let state = 0;
		const BeginInput = 1;
		const SubmitInput = 2;
		const AwaitingAudioState = 3;
		const DoneState = 4;
		const ignore = "、…。！？～";

		let setCorrectColor = () => {
			$("body").css('background-color', 'lightgreen');
		};

		let setWrongColor = () => {
			$("body").css('background-color', 'pink');
		};

		const showError = (text) => {
			$(".error").text(text);
			$('.error').fadeIn().delay(5000).fadeOut();
		};

		const stateEnterHandlers = [
			() => { // beginInput
				<% if(mode == 1 || mode == 2) {%>
				state = AwaitingAudioState;
				var audio = new Audio('/audio/<%- fact.audio %>');
				$("#begin-band").hide();
				audio.addEventListener("ended", function(){
					$("#original-text").hide();
					$("#blanked-text").show();
					$('input').show();
					$('input').focus();

					state = BeginInput;
				});
				audio.play();
				<% } else { %>
				$("#original-text").hide();
				$("#begin-band").hide();
				$('input').show();
				$('input').focus();

				state = BeginInput;
				<% } %>
			},
			() => { // submitInput
				if($("input").length > 0){
					const input = $('input').val();

					$("#continue").show();
	        		$('input').attr('disabled', true);

	        		state = SubmitInput;

					$.post('/review', { deck: "<%= deck %>", id: targetId, input: input, original: originalText, duration: new Date().getTime() - start, debug: <%= debug %>, type: '<%= mode == 2 ? 'rw' : 'rs' %>' }, (res) => {
						console.log(res);

						let outString = "";
						let missedString = "";
						let deleteString = "";
						for(const pair of res.pairs){
							const isMissingPunctuation = pair[1] == null && ignore.includes(pair[0]);
							if(pair[0] != pair[1] && !isMissingPunctuation){
								if(pair[0] != null) missedString += pair[0];
								if(pair[1] != null) deleteString += pair[1];
							} else {
								if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
								if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
								deleteString = "";
								missedString = "";
								outString += pair[0];
							}
						}
						if(deleteString != "") outString += '<span class="delete">' + deleteString + '</span>';
						if(missedString != "") outString += '<span class="missed">' + missedString + '</span>';
						$('#output-text').show();
						$("#output-text").html(outString + " [" + Math.round(100 * res.score) + "%]");

						if(res.error){
							showError(res.error);
						}

						$("#answer-text-container").show();

						<% if(mode == 2) { %>
						if(res.score >= 0.95) setCorrectColor();
						else setWrongColor();
						<% } else { %>
						$("body").css('background-color', 'lightblue');
						<% } %>

						state = DoneState;
					});
	        	}
			},
			() => { // awaitSubmitResponse
				showError("Please wait while the submission completes.");
			},
			() => {
				showError("Please wait for the audio to finish playing.");
			},
			() => {
				location.reload();
			}
		];

		$(document).ready(() => {
			const textInput = document.querySelector('input');
			wanakana.bind(textInput);
			$('input').hide();
			$('#output-text').hide();

			$(document).keypress((e) => {
	        	console.log(e.which);
	        	if(e.which == 13) {
	        		stateEnterHandlers[state]();
				}
			});

			$("#begin-input").click(() => {
				stateEnterHandlers[state]();
			});

			$("#continue").click(() => {
				if(state == SubmitInput){
	        		location.reload();
	        	}
			});

			$("#delete-review").click(() => {
				if(confirm("Are you sure you want to delete this?")){
					//$.post('/delete-review', { id: targetId }, () => {
						location.reload();
					//});
				}
			});

			$("#post-play-button").click(() => {
				const audio = new Audio('/audio/<%- fact.audio %>');
				audio.play();
			});
		});
	</script>
</head>
<body>
	<% if(fact.image) { %>
	<%- include('partial/recall-review-image-content', { reviewProgress: reviewProgress, mode: mode }) %>
	<% } else { %>
	<%- include('partial/recall-review-band-content', { reviewProgress: reviewProgress, mode: mode }) %>
	<% } %>
</body>
</html>